{
  "openapi": "3.0.2",
  "info": {
    "title": "Automat",
    "version": "3.0",
    "termsOfService": "http://loading"
  },
  "servers": [
    {
      "url": "https://robokop-automat.apps.renci.org"
    }
  ],
  "paths": {
    "/binding-db/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "BINDING"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_binding-db_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/binding-db/sri_testing_data": {
      "get": {
        "tags": ["trapi", "BINDING"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_binding-db_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/binding-db/query": {
      "post": {
        "tags": ["trapi", "BINDING"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_binding-db_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:SmallMolecule"],
                        "ids": ["PUBCHEM.COMPOUND:44640149"]
                      },
                      "n1": {
                        "categories": ["biolink:Protein"],
                        "ids": ["UniProtKB:P51570"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:affects"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/binding-db/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_binding-db",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["BINDING"]
      }
    },
    "/binding-db/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_binding-db",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["BINDING"]
      }
    },
    "/binding-db/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_binding-db",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["BINDING"]
      }
    },
    "/binding-db/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_binding-db",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["BINDING"]
      }
    },
    "/binding-db/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_binding-db",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["BINDING"]
      }
    },
    "/cam-kp/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "CAM KG"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_cam-kp_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/cam-kp/sri_testing_data": {
      "get": {
        "tags": ["trapi", "CAM KG"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_cam-kp_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/cam-kp/query": {
      "post": {
        "tags": ["trapi", "CAM KG"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_cam-kp_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:BiologicalProcess"],
                        "ids": ["GO:0000209"]
                      },
                      "n1": {
                        "categories": ["biolink:BiologicalProcess"],
                        "ids": ["GO:0006511"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:precedes"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cam-kp/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_cam-kp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["CAM KG"]
      }
    },
    "/cam-kp/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_cam-kp",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["CAM KG"]
      }
    },
    "/cam-kp/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_cam-kp",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["CAM KG"]
      }
    },
    "/cam-kp/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_cam-kp",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["CAM KG"]
      }
    },
    "/cam-kp/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_cam-kp",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["CAM KG"]
      }
    },
    "/cebs/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "cebs"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_cebs_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/cebs/sri_testing_data": {
      "get": {
        "tags": ["trapi", "cebs"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_cebs_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/cebs/query": {
      "post": {
        "tags": ["trapi", "cebs"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_cebs_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:SmallMolecule"],
                        "ids": ["CHEBI:17747"]
                      },
                      "n1": {
                        "categories": ["biolink:NamedThing"],
                        "ids": ["MPATH:353"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": [
                          "biolink:associated_with_increased_likelihood_of"
                        ]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cebs/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_cebs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["cebs"]
      }
    },
    "/cebs/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_cebs",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["cebs"]
      }
    },
    "/cebs/node/{curie}": {
      "get": {
        "summary": "Find a node by it's `curie` identifier.",
        "description": "Returns information about a node matching `curie`.",
        "operationId": "node_node__curie__get_cebs",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "example": "CHEBI:17747",
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node Node  Curie  Get",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["cebs"]
      }
    },
    "/cebs/edges/{curie}": {
      "get": {
        "summary": "Get edges connected to the node with the identifier `curie`. ",
        "description": "Returns edges connected to the node with the identifier `curie`. Optionally, filter edges by predicate or adjacent node category.",
        "operationId": "one_hop_edges__curie__get_cebs",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "example": "CHEBI:17747",
            "name": "curie",
            "in": "path"
          },
          {
            "description": "Optionally provide a category to filter adjacent nodes and their edges by.",
            "required": false,
            "schema": {
              "title": "Category",
              "type": "string",
              "description": "Optionally provide a category to filter adjacent nodes and their edges by."
            },
            "example": "biolink:NamedThing",
            "name": "category",
            "in": "query"
          },
          {
            "description": "Optionally provide a predicate to filter edges by.",
            "required": false,
            "schema": {
              "title": "Predicate",
              "type": "string",
              "description": "Optionally provide a predicate to filter edges by."
            },
            "example": "biolink:associated_with_increased_likelihood_of",
            "name": "predicate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer"
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer"
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop Edges  Curie  Get",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["cebs"]
      }
    },
    "/cebs/edge_summary/{curie}": {
      "get": {
        "summary": "Get a summary of edges connected to the node with the identifier `curie`. ",
        "description": "Returns a list of the kinds edges connected to the node with the identifier `curie`. Results are formatted like [[predicate, node_category, count], ...].",
        "operationId": "one_hop_summary_edge_summary__curie__get_cebs",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "example": "CHEBI:17747",
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop Summary Edge Summary  Curie  Get",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["cebs"]
      }
    },
    "/cebs/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_cebs",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["cebs"]
      }
    },
    "/ctd/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "CTD"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_ctd_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/ctd/sri_testing_data": {
      "get": {
        "tags": ["trapi", "CTD"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_ctd_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/ctd/query": {
      "post": {
        "tags": ["trapi", "CTD"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_ctd_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:SmallMolecule"],
                        "ids": ["PUBCHEM.COMPOUND:92196"]
                      },
                      "n1": {
                        "categories": ["biolink:Gene"],
                        "ids": ["NCBIGene:6531"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:affects"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ctd/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_ctd",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["CTD"]
      }
    },
    "/ctd/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_ctd",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["CTD"]
      }
    },
    "/ctd/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_ctd",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["CTD"]
      }
    },
    "/ctd/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_ctd",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["CTD"]
      }
    },
    "/ctd/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_ctd",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["CTD"]
      }
    },
    "/drugcentral/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "DrugCentral"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_drugcentral_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/drugcentral/sri_testing_data": {
      "get": {
        "tags": ["trapi", "DrugCentral"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_drugcentral_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/drugcentral/query": {
      "post": {
        "tags": ["trapi", "DrugCentral"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_drugcentral_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:SmallMolecule"],
                        "ids": ["PUBCHEM.COMPOUND:91668186"]
                      },
                      "n1": {
                        "categories": ["biolink:Disease"],
                        "ids": ["MONDO:0005494"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:treats"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/drugcentral/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_drugcentral",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["DrugCentral"]
      }
    },
    "/drugcentral/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_drugcentral",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["DrugCentral"]
      }
    },
    "/drugcentral/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_drugcentral",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["DrugCentral"]
      }
    },
    "/drugcentral/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_drugcentral",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["DrugCentral"]
      }
    },
    "/drugcentral/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_drugcentral",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["DrugCentral"]
      }
    },
    "/genome-alliance/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "Alliance of Genome Resources"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_genome-alliance_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/genome-alliance/sri_testing_data": {
      "get": {
        "tags": ["trapi", "Alliance of Genome Resources"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_genome-alliance_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/genome-alliance/query": {
      "post": {
        "tags": ["trapi", "Alliance of Genome Resources"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_genome-alliance_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:Gene"],
                        "ids": ["NCBIGene:14462463"]
                      },
                      "n1": {
                        "categories": ["biolink:Gene"],
                        "ids": ["NCBIGene:796017"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:orthologous_to"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/genome-alliance/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_genome-alliance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Alliance of Genome Resources"]
      }
    },
    "/genome-alliance/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_genome-alliance",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["Alliance of Genome Resources"]
      }
    },
    "/genome-alliance/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_genome-alliance",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Alliance of Genome Resources"]
      }
    },
    "/genome-alliance/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_genome-alliance",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Alliance of Genome Resources"]
      }
    },
    "/genome-alliance/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_genome-alliance",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Alliance of Genome Resources"]
      }
    },
    "/gtex/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "GTEx"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_gtex_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/gtex/sri_testing_data": {
      "get": {
        "tags": ["trapi", "GTEx"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_gtex_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/gtex/query": {
      "post": {
        "tags": ["trapi", "GTEx"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_gtex_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:SequenceVariant"],
                        "ids": ["CAID:CA8545933"]
                      },
                      "n1": {
                        "categories": ["biolink:Gene"],
                        "ids": ["NCBIGene:192666"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:is_frameshift_variant_of"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/gtex/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_gtex",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["GTEx"]
      }
    },
    "/gtex/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_gtex",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["GTEx"]
      }
    },
    "/gtex/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_gtex",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["GTEx"]
      }
    },
    "/gtex/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_gtex",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["GTEx"]
      }
    },
    "/gtex/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_gtex",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["GTEx"]
      }
    },
    "/gtopdb/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "GtoPdb"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_gtopdb_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/gtopdb/sri_testing_data": {
      "get": {
        "tags": ["trapi", "GtoPdb"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_gtopdb_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/gtopdb/query": {
      "post": {
        "tags": ["trapi", "GtoPdb"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_gtopdb_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:SmallMolecule"],
                        "ids": ["CHEBI:195557"]
                      },
                      "n1": {
                        "categories": ["biolink:Gene"],
                        "ids": ["NCBIGene:239"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:affects"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/gtopdb/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_gtopdb",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["GtoPdb"]
      }
    },
    "/gtopdb/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_gtopdb",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["GtoPdb"]
      }
    },
    "/gtopdb/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_gtopdb",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["GtoPdb"]
      }
    },
    "/gtopdb/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_gtopdb",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["GtoPdb"]
      }
    },
    "/gtopdb/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_gtopdb",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["GtoPdb"]
      }
    },
    "/gwas-catalog/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "GWAS Catalog"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_gwas-catalog_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/gwas-catalog/sri_testing_data": {
      "get": {
        "tags": ["trapi", "GWAS Catalog"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_gwas-catalog_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/gwas-catalog/query": {
      "post": {
        "tags": ["trapi", "GWAS Catalog"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_gwas-catalog_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:SequenceVariant"],
                        "ids": ["CAID:CA241642928"]
                      },
                      "n1": {
                        "categories": ["biolink:PhenotypicFeature"],
                        "ids": ["EFO:0003923"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:has_phenotype"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/gwas-catalog/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_gwas-catalog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["GWAS Catalog"]
      }
    },
    "/gwas-catalog/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_gwas-catalog",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["GWAS Catalog"]
      }
    },
    "/gwas-catalog/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_gwas-catalog",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["GWAS Catalog"]
      }
    },
    "/gwas-catalog/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_gwas-catalog",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["GWAS Catalog"]
      }
    },
    "/gwas-catalog/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_gwas-catalog",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["GWAS Catalog"]
      }
    },
    "/hetio/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "Hetionet"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_hetio_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/hetio/sri_testing_data": {
      "get": {
        "tags": ["trapi", "Hetionet"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_hetio_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/hetio/query": {
      "post": {
        "tags": ["trapi", "Hetionet"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_hetio_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:AnatomicalEntity"],
                        "ids": ["UBERON:0000178"]
                      },
                      "n1": {
                        "categories": ["biolink:Gene"],
                        "ids": ["NCBIGene:9489"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:regulates"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/hetio/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_hetio",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Hetionet"]
      }
    },
    "/hetio/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_hetio",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["Hetionet"]
      }
    },
    "/hetio/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_hetio",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Hetionet"]
      }
    },
    "/hetio/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_hetio",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Hetionet"]
      }
    },
    "/hetio/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_hetio",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Hetionet"]
      }
    },
    "/hgnc/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "HGNC"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_hgnc_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/hgnc/sri_testing_data": {
      "get": {
        "tags": ["trapi", "HGNC"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_hgnc_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/hgnc/query": {
      "post": {
        "tags": ["trapi", "HGNC"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_hgnc_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:GeneFamily"],
                        "ids": ["HGNC.FAMILY:594"]
                      },
                      "n1": {
                        "categories": ["biolink:Gene"],
                        "ids": ["NCBIGene:1"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:has_part"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/hgnc/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_hgnc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["HGNC"]
      }
    },
    "/hgnc/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_hgnc",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["HGNC"]
      }
    },
    "/hgnc/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_hgnc",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["HGNC"]
      }
    },
    "/hgnc/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_hgnc",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["HGNC"]
      }
    },
    "/hgnc/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_hgnc",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["HGNC"]
      }
    },
    "/hmdb/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "HMDB"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_hmdb_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/hmdb/sri_testing_data": {
      "get": {
        "tags": ["trapi", "HMDB"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_hmdb_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/hmdb/query": {
      "post": {
        "tags": ["trapi", "HMDB"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_hmdb_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:Pathway"],
                        "ids": ["SMPDB:SMP0000044"]
                      },
                      "n1": {
                        "categories": ["biolink:SmallMolecule"],
                        "ids": ["CHEMBL.COMPOUND:CHEMBL1233327"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:has_participant"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/hmdb/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_hmdb",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["HMDB"]
      }
    },
    "/hmdb/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_hmdb",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["HMDB"]
      }
    },
    "/hmdb/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_hmdb",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["HMDB"]
      }
    },
    "/hmdb/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_hmdb",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["HMDB"]
      }
    },
    "/hmdb/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_hmdb",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["HMDB"]
      }
    },
    "/human-goa/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "Human GOA"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_human-goa_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/human-goa/sri_testing_data": {
      "get": {
        "tags": ["trapi", "Human GOA"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_human-goa_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/human-goa/query": {
      "post": {
        "tags": ["trapi", "Human GOA"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_human-goa_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:Protein"],
                        "ids": ["UniProtKB:A5YKK6"]
                      },
                      "n1": {
                        "categories": ["biolink:MolecularActivity"],
                        "ids": ["GO:0004535"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:contributes_to"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/human-goa/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_human-goa",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Human GOA"]
      }
    },
    "/human-goa/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_human-goa",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["Human GOA"]
      }
    },
    "/human-goa/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_human-goa",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Human GOA"]
      }
    },
    "/human-goa/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_human-goa",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Human GOA"]
      }
    },
    "/human-goa/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_human-goa",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Human GOA"]
      }
    },
    "/icees-kg/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "ICEES KG"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_icees-kg_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/icees-kg/sri_testing_data": {
      "get": {
        "tags": ["trapi", "ICEES KG"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_icees-kg_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/icees-kg/query": {
      "post": {
        "tags": ["trapi", "ICEES KG"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_icees-kg_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:SmallMolecule"],
                        "ids": ["PUBCHEM.COMPOUND:2083"]
                      },
                      "n1": {
                        "categories": ["biolink:Disease"],
                        "ids": ["MONDO:0007079"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:positively_correlated_with"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/icees-kg/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_icees-kg",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["ICEES KG"]
      }
    },
    "/icees-kg/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_icees-kg",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["ICEES KG"]
      }
    },
    "/icees-kg/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_icees-kg",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["ICEES KG"]
      }
    },
    "/icees-kg/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_icees-kg",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["ICEES KG"]
      }
    },
    "/icees-kg/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_icees-kg",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["ICEES KG"]
      }
    },
    "/intact/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "IntAct Molecular Interaction Database"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_intact_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/intact/sri_testing_data": {
      "get": {
        "tags": ["trapi", "IntAct Molecular Interaction Database"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_intact_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/intact/query": {
      "post": {
        "tags": ["trapi", "IntAct Molecular Interaction Database"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_intact_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:Protein"],
                        "ids": ["UniProtKB:P0A420"]
                      },
                      "n1": {
                        "categories": ["biolink:Protein"],
                        "ids": ["UniProtKB:P0A3C9"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": [
                          "biolink:directly_physically_interacts_with"
                        ]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/intact/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_intact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["IntAct Molecular Interaction Database"]
      }
    },
    "/intact/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_intact",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["IntAct Molecular Interaction Database"]
      }
    },
    "/intact/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_intact",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["IntAct Molecular Interaction Database"]
      }
    },
    "/intact/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_intact",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["IntAct Molecular Interaction Database"]
      }
    },
    "/intact/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_intact",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["IntAct Molecular Interaction Database"]
      }
    },
    "/monarch-kg/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "Monarch KG"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_monarch-kg_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/monarch-kg/sri_testing_data": {
      "get": {
        "tags": ["trapi", "Monarch KG"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_monarch-kg_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/monarch-kg/query": {
      "post": {
        "tags": ["trapi", "Monarch KG"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_monarch-kg_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:Gene"],
                        "ids": ["FB:FBgn0004373"]
                      },
                      "n1": {
                        "categories": ["biolink:Gene"],
                        "ids": ["FB:FBgn0010348"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:interacts_with"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/monarch-kg/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_monarch-kg",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Monarch KG"]
      }
    },
    "/monarch-kg/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_monarch-kg",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["Monarch KG"]
      }
    },
    "/monarch-kg/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_monarch-kg",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Monarch KG"]
      }
    },
    "/monarch-kg/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_monarch-kg",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Monarch KG"]
      }
    },
    "/monarch-kg/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_monarch-kg",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Monarch KG"]
      }
    },
    "/panther/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "PANTHER"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_panther_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/panther/sri_testing_data": {
      "get": {
        "tags": ["trapi", "PANTHER"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_panther_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/panther/query": {
      "post": {
        "tags": ["trapi", "PANTHER"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_panther_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:GeneFamily"],
                        "ids": ["PANTHER.FAMILY:PTHR23158"]
                      },
                      "n1": {
                        "categories": ["biolink:GeneFamily"],
                        "ids": ["PANTHER.FAMILY:PTHR23158:SF57"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:has_part"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/panther/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_panther",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["PANTHER"]
      }
    },
    "/panther/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_panther",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["PANTHER"]
      }
    },
    "/panther/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_panther",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["PANTHER"]
      }
    },
    "/panther/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_panther",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["PANTHER"]
      }
    },
    "/panther/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_panther",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["PANTHER"]
      }
    },
    "/pharos/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "Pharos"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_pharos_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/pharos/sri_testing_data": {
      "get": {
        "tags": ["trapi", "Pharos"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_pharos_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/pharos/query": {
      "post": {
        "tags": ["trapi", "Pharos"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_pharos_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:Gene"],
                        "ids": ["NCBIGene:1491"]
                      },
                      "n1": {
                        "categories": ["biolink:Disease"],
                        "ids": ["MONDO:0009058"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:genetically_associated_with"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/pharos/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_pharos",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Pharos"]
      }
    },
    "/pharos/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_pharos",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["Pharos"]
      }
    },
    "/pharos/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_pharos",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Pharos"]
      }
    },
    "/pharos/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_pharos",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Pharos"]
      }
    },
    "/pharos/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_pharos",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Pharos"]
      }
    },
    "/reactome/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "Reactome"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_reactome_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/reactome/sri_testing_data": {
      "get": {
        "tags": ["trapi", "Reactome"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_reactome_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/reactome/query": {
      "post": {
        "tags": ["trapi", "Reactome"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_reactome_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:MolecularActivity"],
                        "ids": ["REACT:R-HSA-9626253"]
                      },
                      "n1": {
                        "categories": ["biolink:BiologicalProcess"],
                        "ids": ["GO:0061684"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:occurs_in"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/reactome/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_reactome",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Reactome"]
      }
    },
    "/reactome/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_reactome",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["Reactome"]
      }
    },
    "/reactome/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_reactome",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Reactome"]
      }
    },
    "/reactome/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_reactome",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Reactome"]
      }
    },
    "/reactome/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_reactome",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Reactome"]
      }
    },
    "/robokopkg/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "ROBOKOP KG"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_robokopkg_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/robokopkg/sri_testing_data": {
      "get": {
        "tags": ["trapi", "ROBOKOP KG"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_robokopkg_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/robokopkg/query": {
      "post": {
        "tags": ["trapi", "ROBOKOP KG"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_robokopkg_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:OrganismTaxon"],
                        "ids": ["NCBITaxon:1661386"]
                      },
                      "n1": {
                        "categories": ["biolink:OrganismTaxon"],
                        "ids": ["NCBITaxon:286"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:subclass_of"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/robokopkg/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_robokopkg",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["ROBOKOP KG"]
      }
    },
    "/robokopkg/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_robokopkg",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["ROBOKOP KG"]
      }
    },
    "/robokopkg/node/{curie}": {
      "get": {
        "summary": "Find a node by it's `curie` identifier.",
        "description": "Returns information about a node matching `curie`.",
        "operationId": "node_node__curie__get_robokopkg",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "example": "NCBITaxon:7227",
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node Node  Curie  Get",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["ROBOKOP KG"]
      }
    },
    "/robokopkg/edges/{curie}": {
      "get": {
        "summary": "Get edges connected to the node with the identifier `curie`. ",
        "description": "Returns edges connected to the node with the identifier `curie`. Optionally, filter edges by predicate or adjacent node category.",
        "operationId": "one_hop_edges__curie__get_robokopkg",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "example": "NCBITaxon:7227",
            "name": "curie",
            "in": "path"
          },
          {
            "description": "Optionally provide a category to filter adjacent nodes and their edges by.",
            "required": false,
            "schema": {
              "title": "Category",
              "type": "string",
              "description": "Optionally provide a category to filter adjacent nodes and their edges by."
            },
            "example": "biolink:AnatomicalEntity",
            "name": "category",
            "in": "query"
          },
          {
            "description": "Optionally provide a predicate to filter edges by.",
            "required": false,
            "schema": {
              "title": "Predicate",
              "type": "string",
              "description": "Optionally provide a predicate to filter edges by."
            },
            "example": "biolink:has_part",
            "name": "predicate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer"
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer"
            },
            "name": "offset",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Count Only",
              "type": "boolean"
            },
            "name": "count_only",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop Edges  Curie  Get",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["ROBOKOP KG"]
      }
    },
    "/robokopkg/edge_summary/{curie}": {
      "get": {
        "summary": "Get a summary of edges connected to the node with the identifier `curie`. ",
        "description": "Returns a list of the kinds edges connected to the node with the identifier `curie`. Results are formatted like [[predicate, node_category, count], ...].",
        "operationId": "one_hop_summary_edge_summary__curie__get_robokopkg",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "example": "NCBITaxon:7227",
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop Summary Edge Summary  Curie  Get",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["ROBOKOP KG"]
      }
    },
    "/robokopkg/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_robokopkg",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["ROBOKOP KG"]
      }
    },
    "/string-db/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "STRING"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_string-db_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/string-db/sri_testing_data": {
      "get": {
        "tags": ["trapi", "STRING"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_string-db_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/string-db/query": {
      "post": {
        "tags": ["trapi", "STRING"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_string-db_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:Protein"],
                        "ids": ["UniProtKB:Q9Y6E7"]
                      },
                      "n1": {
                        "categories": ["biolink:Protein"],
                        "ids": ["UniProtKB:Q16667-1"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:coexpressed_with"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/string-db/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_string-db",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["STRING"]
      }
    },
    "/string-db/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_string-db",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["STRING"]
      }
    },
    "/string-db/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_string-db",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["STRING"]
      }
    },
    "/string-db/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_string-db",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["STRING"]
      }
    },
    "/string-db/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_string-db",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["STRING"]
      }
    },
    "/textminingkp/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "Text Mining Provider KG"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_textminingkp_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/textminingkp/sri_testing_data": {
      "get": {
        "tags": ["trapi", "Text Mining Provider KG"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_textminingkp_trapi",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/textminingkp/query": {
      "post": {
        "tags": ["trapi", "Text Mining Provider KG"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_textminingkp_trapi",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:SmallMolecule"],
                        "ids": ["CHEBI:17089"]
                      },
                      "n1": {
                        "categories": ["biolink:Protein"],
                        "ids": ["PR:000000001"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:subclass_of"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/textminingkp/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_textminingkp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Text Mining Provider KG"]
      }
    },
    "/textminingkp/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_textminingkp",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["Text Mining Provider KG"]
      }
    },
    "/textminingkp/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_textminingkp",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Text Mining Provider KG"]
      }
    },
    "/textminingkp/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_textminingkp",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Text Mining Provider KG"]
      }
    },
    "/textminingkp/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_textminingkp",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Text Mining Provider KG"]
      }
    },
    "/ubergraph/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "Ubergraph"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_trapi_ubergraph",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/ubergraph/sri_testing_data": {
      "get": {
        "tags": ["trapi", "Ubergraph"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_trapi_ubergraph",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/ubergraph/query": {
      "post": {
        "tags": ["trapi", "Ubergraph"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_trapi_ubergraph",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:Protein"],
                        "ids": ["UniProtKB:Q9R0M5-1"]
                      },
                      "n1": {
                        "categories": ["biolink:ChemicalEntity"],
                        "ids": ["CHEBI:33579"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:subclass_of"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ubergraph/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_ubergraph",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Ubergraph"]
      }
    },
    "/ubergraph/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_ubergraph",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["Ubergraph"]
      }
    },
    "/ubergraph/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_ubergraph",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Ubergraph"]
      }
    },
    "/ubergraph/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_ubergraph",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Ubergraph"]
      }
    },
    "/ubergraph/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_ubergraph",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Ubergraph"]
      }
    },
    "/viral-proteome/meta_knowledge_graph": {
      "get": {
        "tags": ["trapi", "Viral Proteome"],
        "summary": "Meta knowledge graph representation of this TRAPI web service.",
        "description": "Returns a meta knowledge graph representation of this TRAPI web service. The meta knowledge graph is composed of the union of most specific categories and predicates for each node and edge.",
        "operationId": "get_meta_knowledge_graph_meta_knowledge_graph_get_trapi_viral-proteome",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaKnowledgeGraph"
                }
              }
            }
          }
        }
      }
    },
    "/viral-proteome/sri_testing_data": {
      "get": {
        "tags": ["trapi", "Viral Proteome"],
        "summary": "Test data for usage by the SRI Testing Harness.",
        "description": "Returns a list of edges that are representative examples of the knowledge graph.",
        "operationId": "get_sri_testing_data_sri_testing_data_get_trapi_viral-proteome",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SRITestData"
                }
              }
            }
          }
        }
      }
    },
    "/viral-proteome/query": {
      "post": {
        "tags": ["trapi", "Viral Proteome"],
        "summary": "Accepts TRAPI Queries.",
        "description": "Accepts a TRAPI Query and returns a TRAPI Response. (https://github.com/NCATSTranslator/ReasonerAPI/)",
        "operationId": "reasoner_api_query_post_trapi_viral-proteome",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Profile",
              "type": "boolean",
              "default": false
            },
            "name": "profile",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Validate",
              "type": "boolean",
              "default": false
            },
            "name": "validate",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Subclass",
              "type": "boolean",
              "default": true
            },
            "name": "subclass",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasonerRequest"
              },
              "example": {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n0": {
                        "categories": ["biolink:Protein"],
                        "ids": ["UniProtKB:Q96679"]
                      },
                      "n1": {
                        "categories": ["biolink:CellularComponent"],
                        "ids": ["GO:0030430"]
                      }
                    },
                    "edges": {
                      "e01": {
                        "subject": "n0",
                        "object": "n1",
                        "predicates": ["biolink:active_in"]
                      }
                    }
                  }
                },
                "workflow": [
                  {
                    "id": "lookup"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonerRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response 400 Reasoner Api Query Post",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/viral-proteome/cypher": {
      "post": {
        "summary": "Run a Neo4j cypher query.",
        "description": "Runs a cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
        "operationId": "cypher_cypher_post_viral-proteome",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CypherRequest"
              },
              "example": {
                "query": "MATCH (n) RETURN count(n)"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Viral Proteome"]
      }
    },
    "/viral-proteome/metadata": {
      "get": {
        "summary": "Metadata about the knowledge graph.",
        "description": "Returns JSON with metadata about the data sources in this knowledge graph.",
        "operationId": "metadata_metadata_get_viral-proteome",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Metadata Metadata Get"
                }
              }
            }
          }
        },
        "tags": ["Viral Proteome"]
      }
    },
    "/viral-proteome/{source_type}/{target_type}/{curie}": {
      "get": {
        "summary": "Get one hop results from source type to target type. ",
        "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
        "operationId": "one_hop__source_type___target_type___curie__get_viral-proteome",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Source Type",
              "type": "string"
            },
            "name": "source_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Target Type",
              "type": "string"
            },
            "name": "target_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response One Hop  Source Type   Target Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Viral Proteome"]
      }
    },
    "/viral-proteome/{node_type}/{curie}": {
      "get": {
        "summary": "Find `node` by `curie`",
        "description": "Returns `node` matching `curie`.",
        "operationId": "node__node_type___curie__get_viral-proteome",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Type",
              "type": "string"
            },
            "name": "node_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Curie",
              "type": "string"
            },
            "name": "curie",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Node  Node Type   Curie  Get",
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Viral Proteome"]
      }
    },
    "/viral-proteome/simple_spec": {
      "get": {
        "summary": "Get one-hop connection schema",
        "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
        "operationId": "simple_spec_simple_spec_get_viral-proteome",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Source",
              "type": "string"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Target",
              "type": "string"
            },
            "name": "target",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Simple Spec Simple Spec Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSpecElement"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "tags": ["Viral Proteome"]
      }
    },
    "/registry": {
      "get": {
        "description": "Returns list of available PLATER instances. An entry from this list can be a prefix to route requests to a specific PLATER backend.",
        "operationId": "get_list_of_platers",
        "summary": "List of platers available",
        "parameters": [],
        "tags": ["automat"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": ["plater-1", "plater-2"]
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "BINDING",
      "description": "\nBinding DataBase (BindingDB) openly exposes curated data on chemical entities and their molecular targets.\n\n**Version:** 9164067231dc9b8c\n\n**URL:** [https://www.bindingdb.org/](https://www.bindingdb.org/)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/BINDING_Automat/9164067231dc9b8c/](https://stars.renci.org/var/plater/bl-4.2.1/BINDING_Automat/9164067231dc9b8c/)\n\n**Nodes:** 1,129,797\n\n**Edges:** 2,241,210\n\n"
    },
    {
      "name": "CAM KG",
      "description": "\nThe CAM KG contains data on CAMs (Causal Activity Models), which are small knowledge graphs built using the Web Ontology Language (OWL). The CAM database combines many CAM graphs, along with a large merged bio-ontology containing the full vocabulary of concepts referenced within the individual CAMs. Each CAM describes an instantiation of some of those concepts in a particular context, modeling the interactions between those instances as an interlinked representation of a complex biological or environmental process.\n\n**Version:** e92bd7b217535f2d\n\n\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/CAMKP_Automat/e92bd7b217535f2d/](https://stars.renci.org/var/plater/bl-4.2.1/CAMKP_Automat/e92bd7b217535f2d/)\n\n**Nodes:** 119,917\n\n**Edges:** 2,219,632\n\n"
    },
    {
      "name": "cebs",
      "description": "Operations for cebs."
    },
    {
      "name": "CTD",
      "description": "\nThe Comparative Toxicogenomics Database (CTD) is an open-source database that provides manually curated information about chemical-gene/protein, chemical-disease, and gene/protein-disease relationships, with additional support for the curated relationships provided by function and pathway data.\n\n**Version:** f92c663160ec5e36\n\n**URL:** [http://ctdbase.org/about/](http://ctdbase.org/about/)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/CTD_Automat/f92c663160ec5e36/](https://stars.renci.org/var/plater/bl-4.2.1/CTD_Automat/f92c663160ec5e36/)\n\n**Nodes:** 506,190\n\n**Edges:** 1,336,266\n\n"
    },
    {
      "name": "DrugCentral",
      "description": "\nDrugCentral provides open-source data on active ingredients, chemical entities, pharmaceutical products, drug mode of action, indications, and pharmacologic action for approved drugs, derived from information provided by the US Food & Drug Administration, the European Medicines Agency, and the Pharmaceutical and Medical Devices Agency. Note that DrugCentral provides limited information on discontinued drugs and drugs approved outside of the US, but that information has not been validated.\n\n**Version:** dec0617490b49c7a\n\n**URL:** [https://drugcentral.org/](https://drugcentral.org/)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/DrugCentral_Automat/dec0617490b49c7a/](https://stars.renci.org/var/plater/bl-4.2.1/DrugCentral_Automat/dec0617490b49c7a/)\n\n**Nodes:** 83,627\n\n**Edges:** 680,919\n\n"
    },
    {
      "name": "Alliance of Genome Resources",
      "description": "\nThe Alliance of Genome Resources is a consortium of the owners of seven model organism databases (MODs) and the Gene Ontology (GO) Consortium, whose goal is to provide an integrated view of their data to all biologists, clinicians, and other interested parties. The Alliance provides the results of all methods that have been benchmarked by the Quest for Orthologs Consortium (QfO), as well as curated ortholog inferences from HGNC (human, mouse, rat genes).\n\n**Version:** 06e2a3c1eeea5251\n\n**URL:** [https://www.alliancegenome.org/](https://www.alliancegenome.org/)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/GenomeAllianceOrthologs_Automat/06e2a3c1eeea5251/](https://stars.renci.org/var/plater/bl-4.2.1/GenomeAllianceOrthologs_Automat/06e2a3c1eeea5251/)\n\n**Nodes:** 94,246\n\n**Edges:** 489,352\n\n"
    },
    {
      "name": "GTEx",
      "description": "\nThe Genotype-Tissue Expression (GTEx) portal provides open access to data on tissue-specific gene expression and regulation, derived from molecular assays (e.g., WGS, WES, RNA-Seq) on 54 non-diseased tissue sites across nearly 1000 individuals.\n\n**Version:** a6448b9092bb81a1\n\n**URL:** [https://gtexportal.org/home/](https://gtexportal.org/home/)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/GTEx_Automat/a6448b9092bb81a1/](https://stars.renci.org/var/plater/bl-4.2.1/GTEx_Automat/a6448b9092bb81a1/)\n\n**Nodes:** 4,921,318\n\n**Edges:** 52,935,456\n\n"
    },
    {
      "name": "GtoPdb",
      "description": "\nThe International Union of Basic and Clinical Pharmacology (IUPHAR) / British Pharmacological Society (BPS) Guide to Pharmacology database (GtoPdb) provides searchable open-source quantitative information on drug targets and the prescription medicines and experimental drugs that act on them.\n\n**Version:** 0ea6074c824c2236\n\n**URL:** [http://www.guidetopharmacology.org/](http://www.guidetopharmacology.org/)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/GtoPdb_Automat/0ea6074c824c2236/](https://stars.renci.org/var/plater/bl-4.2.1/GtoPdb_Automat/0ea6074c824c2236/)\n\n**Nodes:** 13,000\n\n**Edges:** 93,957\n\n"
    },
    {
      "name": "GWAS Catalog",
      "description": "\nThe Genome-Wide Association Studies (GWAS) Catalog provides a curated, searchable, visualisable, and openly available database of single nucleotide polymorphism (SNP)-trait associations, derived from GWAS publications, including the reported trait, significant SNP-trait associations, and sample metadata.\n\n**Version:** e30aceb322a33462\n\n**URL:** [https://www.ebi.ac.uk/gwas/](https://www.ebi.ac.uk/gwas/)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/GWASCatalog_Automat/e30aceb322a33462/](https://stars.renci.org/var/plater/bl-4.2.1/GWASCatalog_Automat/e30aceb322a33462/)\n\n**Nodes:** 513,490\n\n**Edges:** 3,522,694\n\n"
    },
    {
      "name": "Hetionet",
      "description": "\nHetionet is an open-source biomedical \"heterogeneous information network\" (hetnet) or graph-based resource describing relationships uncovered by millions of biomedical research studies over the past fifty years.\n\n**Version:** 85a5f53e63150e1e\n\n**URL:** [https://het.io/](https://het.io/)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/Hetio_Automat/85a5f53e63150e1e/](https://stars.renci.org/var/plater/bl-4.2.1/Hetio_Automat/85a5f53e63150e1e/)\n\n**Nodes:** 117,671\n\n**Edges:** 2,620,982\n\n"
    },
    {
      "name": "HGNC",
      "description": "\nThe HUGO Gene Nomenclature Committee (HGNC) database provides open access to HGNC-approved unique symbols and names for human genes, gene groups, and associated resources, including links to genomic, proteomic and phenotypic information.\n\n**Version:** dee31cfce74e5944\n\n**URL:** [https://www.genenames.org/](https://www.genenames.org/)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/HGNC_Automat/dee31cfce74e5944/](https://stars.renci.org/var/plater/bl-4.2.1/HGNC_Automat/dee31cfce74e5944/)\n\n**Nodes:** 27,527\n\n**Edges:** 31,246\n\n"
    },
    {
      "name": "HMDB",
      "description": "\nThe Human Metabolome DataBase (HMDB) is an openly accessible database containing detailed information about small molecule metabolites found in the human body, with links between chemical data, clinical data, and molecular biology/biochemistry data, including protein sequences (enzymes and transporters).\n\n**Version:** 6715124699b6dbf0\n\n**URL:** [https://hmdb.ca/](https://hmdb.ca/)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/HMDB_Automat/6715124699b6dbf0/](https://stars.renci.org/var/plater/bl-4.2.1/HMDB_Automat/6715124699b6dbf0/)\n\n**Nodes:** 139,424\n\n**Edges:** 1,859,317\n\n"
    },
    {
      "name": "Human GOA",
      "description": "\nThe Gene Ontology (GO) Consortium’s Human Gene Ontologies Annotations (Human GOA) resource provides open access to curated assignment of GO terms to proteins in the UniProt KnowledgeBase (UniProtKB), RNA molecules from RNACentral, and protein complexes from the Complex Portal.\n\n**Version:** 06f107a4e9e8e547\n\n**URL:** [https://www.ebi.ac.uk/GOA/index](https://www.ebi.ac.uk/GOA/index)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/HumanGOA_Automat/06f107a4e9e8e547/](https://stars.renci.org/var/plater/bl-4.2.1/HumanGOA_Automat/06f107a4e9e8e547/)\n\n**Nodes:** 153,511\n\n**Edges:** 1,191,073\n\n"
    },
    {
      "name": "ICEES KG",
      "description": "\nICEES KG is the KG version of the Integrated Clinical and Environmental Exposures Service (ICEES), which provides regulatory-compliant open access to clinical data (e.g., electronic health records, survey data, clinical research data) that have been integrated at the patient level with environmental exposures data (e.g., airborne pollutants, landfills, concentrated animal feeding operations, socio-economic indicators).\n\n**Version:** 8-20-2024\n\n**URL:** [https://github.com/NCATSTranslator/Translator-All/wiki/Exposures-Provider-ICEES](https://github.com/NCATSTranslator/Translator-All/wiki/Exposures-Provider-ICEES)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/icees-kg/1.5.0_collapsed/](https://stars.renci.org/var/plater/bl-4.2.1/icees-kg/1.5.0_collapsed/)\n\n**Nodes:** 226\n\n**Edges:** 14,342\n\n"
    },
    {
      "name": "IntAct Molecular Interaction Database",
      "description": "\nThe IntAct Molecular Interaction Database provides open access to molecular interactions data derived from literature curation or direct user submission.\n\n**Version:** e5b936f966a02c2c\n\n**URL:** [https://www.ebi.ac.uk/intact/home](https://www.ebi.ac.uk/intact/home)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/IntAct_Automat/e5b936f966a02c2c/](https://stars.renci.org/var/plater/bl-4.2.1/IntAct_Automat/e5b936f966a02c2c/)\n\n**Nodes:** 257,855\n\n**Edges:** 2,529,050\n\n"
    },
    {
      "name": "Monarch KG",
      "description": "\nThe Monarch knowledge graph is a reference implementation of the Biolink model specification. It contains data from the Monarch Initiative aggregated database, as well as several OBO ontologies. These data sources provide links between diseases, phenotypes, genomic features across human and non-human organisms. It is built using the knowledge graph exchange (KGX) framework, which transforms a variety of standard formats, such as RDF, OWL, and TRAPI JSON, to nodes and edges CSV files that are uploaded into Neo4j. The TRAPI API (https://github.com/NCATSTranslator/ReasonerAPI) is built using PLATER (https://github.com/NCATSTranslator/Translator-All/wiki/Plater), a tool that creates a TRAPI service given a Biolink compliant instance of Neo4j.\n\n**Version:** 2024-07-12\n\n**URL:** [https://github.com/monarch-initiative/monarch-ingest](https://github.com/monarch-initiative/monarch-ingest)\n\n**Files:** [https://stars.renci.org/var/plater/monarch-kg/2024-07-12/](https://stars.renci.org/var/plater/monarch-kg/2024-07-12/)\n\n**Nodes:** 1,028,155\n\n**Edges:** 11,076,689\n\n"
    },
    {
      "name": "PANTHER",
      "description": "\nThe Protein ANalysis THrough Evolutionary Relationships (PANTHER) classification system provides an openly available annotation library of gene family phylogenetic trees, with persistent identifiers attached to all nodes in the trees and annotation of each protein member of the family by its family and protein class, subfamily, orthologs, paralogs, GO Phylogenetic Annotation Project function, and Reactome pathways.\n\n**Version:** c0189f14ba41da6c\n\n**URL:** [http://pantherdb.org/](http://pantherdb.org/)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/PANTHER_Automat/c0189f14ba41da6c/](https://stars.renci.org/var/plater/bl-4.2.1/PANTHER_Automat/c0189f14ba41da6c/)\n\n**Nodes:** 87,559\n\n**Edges:** 986,863\n\n"
    },
    {
      "name": "Pharos",
      "description": "\nPharos is the openly accessible user interface to the Illuminating the Druggable Genome (IDG) program’s Knowledge Management Center (KMC), which aims to develop a comprehensive, integrated knowledge-base for the Druggable Genome (DG) to illuminate the uncharacterized and/or poorly annotated portion of the DG, focusing on three of the most common drug-targeted protein families: G-protein-coupled receptors; ion channels; and kinases.\n\n**Version:** d3068b509bf17ff3\n\n**URL:** [https://pharos.nih.gov/](https://pharos.nih.gov/)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/PHAROS_Automat/d3068b509bf17ff3/](https://stars.renci.org/var/plater/bl-4.2.1/PHAROS_Automat/d3068b509bf17ff3/)\n\n**Nodes:** 345,008\n\n**Edges:** 1,073,458\n\n"
    },
    {
      "name": "Reactome",
      "description": "\nREACTOME is an open-source, open access, manually curated and peer-reviewed pathway database. Our goal is to provide intuitive bioinformatics tools for the visualization, interpretation and analysis of pathway knowledge to support basic and clinical research, genome analysis, modeling, systems biology and education.\n\n**Version:** 07a8dc1cac1936b5\n\n**URL:** [https://reactome.org/](https://reactome.org/)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/Reactome_Automat/07a8dc1cac1936b5/](https://stars.renci.org/var/plater/bl-4.2.1/Reactome_Automat/07a8dc1cac1936b5/)\n\n**Nodes:** 626,481\n\n**Edges:** 2,018,587\n\n"
    },
    {
      "name": "ROBOKOP KG",
      "description": "\nROBOKOP (KG) is an open-source biomedical KG that supports the ROBOKOP application and currently contains millions of biomedical relationships derived from dozens of integrated and harmonized biological knowledge sources and bio-ontologies, including the Automat primary and aggregate knowledge sources. ROBOKOP KG also includes text-mined assertions from PubMed and PubMed Central, derived from natural language processing (NLP). Note that text-based assertions, while providing valuable information, must be interpreted with caution, as NLP algorithms may introduce false assertions.\n\n**Version:** 6fe13d850fdbf89c\n\n**URL:** [http://robokopkg.renci.org/browser/](http://robokopkg.renci.org/browser/)\n\n**Files:** [https://robokop.renci.org/graphs/RobokopKG/6fe13d850fdbf89c/](https://robokop.renci.org/graphs/RobokopKG/6fe13d850fdbf89c/)\n\n**Nodes:** 9,867,160\n\n**Edges:** 129,949,060\n\n"
    },
    {
      "name": "STRING",
      "description": "\nThe Search Tool for the Retrieval of INteracting Genes/proteins (STRING) database provides information on known and predicted protein-protein interactions (both direct and indirect) derived from genomic context predictions, high-throughput laboratory experiments, conserved co-expression, automated text mining, and aggregated knowledge from primary data sources.\n\n**Version:** 4ca5a0ce557e2c18\n\n**URL:** [https://string-db.org/](https://string-db.org/)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/STRING-DB_Automat/4ca5a0ce557e2c18/](https://stars.renci.org/var/plater/bl-4.2.1/STRING-DB_Automat/4ca5a0ce557e2c18/)\n\n**Nodes:** 65,069\n\n**Edges:** 11,402,297\n\n"
    },
    {
      "name": "Text Mining Provider KG",
      "description": "\nThe Text Mining Provider KG contains subject-predicate-object assertions derived from the application of natural language processing (NLP) algorithms to the PubMedCentral Open Access collection of publications plus additional titles and abstracts from PubMed. Note thattext-mined assertions, while providing valuable information, must be interpreted with caution, as NLP algorithms may introduce false assertions.\n\n**Version:** 2ae17047aa1b5f3c\n\n**URL:** [https://github.com/NCATSTranslator/Translator-All/wiki/Text-Mining-Provider](https://github.com/NCATSTranslator/Translator-All/wiki/Text-Mining-Provider)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/TMKP_Automat/2ae17047aa1b5f3c/](https://stars.renci.org/var/plater/bl-4.2.1/TMKP_Automat/2ae17047aa1b5f3c/)\n\n**Nodes:** 195,390\n\n**Edges:** 2,354,366\n\n"
    },
    {
      "name": "Ubergraph",
      "description": "\nUbergraph is an open-source graph database containing integrated ontologies, including Gene Ontology (GO), Chemical Entities of Biological Interest (ChHEBI), Human Phenotype Ontology (HPO), and the Uber-anatomy ontology (Uberon)’s anatomical ontology.\n\n**Version:** e6b3204fd3a04413\n\n**URL:** [https://github.com/INCATools/ubergraph](https://github.com/INCATools/ubergraph)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/UbergraphRedundant_Automat/e6b3204fd3a04413/](https://stars.renci.org/var/plater/bl-4.2.1/UbergraphRedundant_Automat/e6b3204fd3a04413/)\n\n**Nodes:** 3,191,939\n\n**Edges:** 142,336,210\n\n"
    },
    {
      "name": "Viral Proteome",
      "description": "\nThe Gene Ontology (GO) Consortium’s Viral Proteome resource provides open access to curated assignment of GO terms to proteins and proteome relationships derived from the UniProt KnowledgeBase for all NCBI taxa classified as viruses.\n\n**Version:** 8ca116ae0bba6945\n\n**URL:** [https://www.ebi.ac.uk/GOA/proteomes](https://www.ebi.ac.uk/GOA/proteomes)\n\n**Files:** [https://stars.renci.org/var/plater/bl-4.2.1/ViralProteome_Automat/8ca116ae0bba6945/](https://stars.renci.org/var/plater/bl-4.2.1/ViralProteome_Automat/8ca116ae0bba6945/)\n\n**Nodes:** 85,062\n\n**Edges:** 317,487\n\n"
    }
  ],
  "components": {
    "schemas": {
      "AboveOrBelowEnum": {
        "title": "AboveOrBelowEnum",
        "enum": ["above", "below"],
        "type": "string",
        "description": "'above' or 'below'."
      },
      "Analysis": {
        "title": "analysis",
        "required": ["resource_id", "edge_bindings"],
        "type": "object",
        "properties": {
          "resource_id": {
            "title": "resource infores",
            "type": "string"
          },
          "edge_bindings": {
            "title": "list of edge bindings",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableMapping_str__HashableSet_EdgeBinding__"
              }
            ]
          },
          "score": {
            "title": "Score",
            "type": "number",
            "format": "float"
          },
          "support_graphs": {
            "title": "Support Graphs",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSet_str_"
              }
            ],
            "nullable": true
          },
          "scoring_method": {
            "title": "Scoring Method",
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "title": "Attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSet_Attribute_"
              }
            ],
            "nullable": true
          }
        },
        "description": "Analysis."
      },
      "AnnotateEdgesParameters": {
        "title": "AnnotateEdgesParameters",
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          }
        },
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "AnnotateNodesParameters": {
        "title": "AnnotateNodesParameters",
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          }
        },
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "AscOrDescEnum": {
        "title": "AscOrDescEnum",
        "enum": ["ascending", "descending"],
        "type": "string",
        "description": "'ascending' or 'descending'."
      },
      "Attribute": {
        "title": "Attribute",
        "required": ["attribute_type_id", "value"],
        "type": "object",
        "properties": {
          "attribute_type_id": {
            "title": "type",
            "type": "string"
          },
          "value": {
            "title": "value"
          },
          "value_type_id": {
            "title": "value_type_id",
            "type": "string",
            "nullable": true
          },
          "original_attribute_name": {
            "title": "Original Attribute Name",
            "type": "string",
            "nullable": true
          },
          "value_url": {
            "title": "Value Url",
            "type": "string",
            "nullable": true
          },
          "attribute_source": {
            "title": "Attribute Source",
            "type": "string",
            "nullable": true
          },
          "description": {
            "title": "Description",
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "title": "Attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSequence_SubAttribute_"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Node/edge attribute."
      },
      "AttributeConstraint": {
        "title": "AttributeConstraint",
        "required": ["name", "id", "operator", "value"],
        "type": "object",
        "properties": {
          "name": {
            "title": "name",
            "type": "string",
            "nullable": false
          },
          "id": {
            "title": "id",
            "type": "string",
            "nullable": false
          },
          "not": {
            "title": "not",
            "type": "boolean",
            "default": false
          },
          "operator": {
            "title": "operator",
            "allOf": [
              {
                "$ref": "#/components/schemas/Operator"
              }
            ]
          },
          "value": {
            "title": "value"
          },
          "unit_id": {
            "title": "unit_id"
          },
          "unit_name": {
            "title": "unit_name"
          }
        },
        "additionalProperties": false,
        "description": "QNode or QEdge attribute constraint."
      },
      "AuxiliaryGraph": {
        "title": "auxiliary graph",
        "required": ["edges", "attributes"],
        "type": "object",
        "properties": {
          "edges": {
            "title": "edges in auxiliary graph",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSet_str_"
              }
            ]
          },
          "attributes": {
            "title": "Attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSet_Attribute_"
              }
            ],
            "nullable": false
          }
        },
        "description": "Auxiliary Graph"
      },
      "AuxiliaryGraphs": {
        "$ref": "#/components/schemas/HashableMapping_str__AuxiliaryGraph_",
        "title": "auxiliary graphs",
        "description": "Auxiliary Graphs"
      },
      "CypherRequest": {
        "title": "CypherRequest",
        "required": ["query"],
        "type": "object",
        "properties": {
          "query": {
            "title": "Query",
            "type": "string"
          }
        }
      },
      "Edge": {
        "title": "knowledge-graph edge",
        "required": ["subject", "object", "predicate", "sources", "attributes"],
        "type": "object",
        "properties": {
          "subject": {
            "title": "subject node id",
            "type": "string"
          },
          "object": {
            "title": "object node id",
            "type": "string"
          },
          "predicate": {
            "title": "edge predicate",
            "pattern": "^biolink:[a-z][a-z_]*$",
            "type": "string"
          },
          "sources": {
            "title": "list of source retrievals",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSet_RetrievalSource_"
              }
            ]
          },
          "qualifiers": {
            "title": "Qualifiers",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSet_Qualifier_"
              }
            ],
            "nullable": true
          },
          "attributes": {
            "title": "Attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSet_Attribute_"
              }
            ],
            "nullable": false
          }
        },
        "additionalProperties": false,
        "description": "Knowledge graph edge."
      },
      "EdgeBinding": {
        "title": "edge binding",
        "required": ["id", "attributes"],
        "type": "object",
        "properties": {
          "id": {
            "title": "knowledge graph id",
            "type": "string",
            "nullable": false
          },
          "attributes": {
            "title": "Attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSet_Attribute_"
              }
            ],
            "nullable": false
          }
        },
        "description": "Edge binding.",
        "example": {
          "id": "string"
        }
      },
      "EnrichResultsParameters": {
        "title": "EnrichResultsParameters",
        "type": "object",
        "properties": {
          "pvalue_threshold": {
            "title": "Pvalue Threshold",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "default": 0.000001
          },
          "qnode_keys": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          },
          "predicates_to_exclude": {
            "$ref": "#/components/schemas/HashableSequence_BiolinkPredicate_"
          }
        },
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "FillAllowParameters": {
        "title": "FillAllowParameters",
        "type": "object",
        "properties": {
          "allowlist": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          },
          "qedge_keys": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "FillDenyParameters": {
        "title": "FillDenyParameters",
        "type": "object",
        "properties": {
          "denylist": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          },
          "qedge_keys": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "FillParameters": {
        "title": "FillParameters",
        "anyOf": [
          {
            "$ref": "#/components/schemas/FillAllowParameters"
          },
          {
            "$ref": "#/components/schemas/FillDenyParameters"
          }
        ],
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "FilterKgraphContinuousKedgeAttributeParameters": {
        "title": "FilterKgraphContinuousKedgeAttributeParameters",
        "required": ["edge_attribute", "threshold", "remove_above_or_below"],
        "type": "object",
        "properties": {
          "edge_attribute": {
            "title": "Edge Attribute",
            "type": "string"
          },
          "threshold": {
            "title": "Threshold",
            "type": "number"
          },
          "remove_above_or_below": {
            "$ref": "#/components/schemas/AboveOrBelowEnum"
          },
          "qedge_keys": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          },
          "qnode_keys": {
            "title": "Qnode Keys",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSequence_str_"
              }
            ],
            "default": []
          }
        },
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "FilterKgraphDiscreteKedgeAttributeParameters": {
        "title": "FilterKgraphDiscreteKedgeAttributeParameters",
        "required": ["edge_attribute"],
        "type": "object",
        "properties": {
          "edge_attribute": {
            "title": "Edge Attribute",
            "type": "string"
          },
          "remove_value": {
            "title": "Remove Value"
          },
          "qedge_keys": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          },
          "qnode_keys": {
            "title": "Qnode Keys",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSequence_str_"
              }
            ],
            "default": []
          }
        },
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "FilterKgraphDiscreteKnodeAttributeParameters": {
        "title": "FilterKgraphDiscreteKnodeAttributeParameters",
        "required": ["node_attribute"],
        "type": "object",
        "properties": {
          "node_attribute": {
            "title": "Node Attribute",
            "type": "string"
          },
          "remove_value": {
            "title": "Remove Value"
          },
          "qnode_keys": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          }
        },
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "FilterKgraphPercentileParameters": {
        "title": "FilterKgraphPercentileParameters",
        "required": ["edge_attribute"],
        "type": "object",
        "properties": {
          "edge_attribute": {
            "title": "Edge Attribute",
            "type": "string"
          },
          "threshold": {
            "title": "Threshold",
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "default": 95
          },
          "remove_above_or_below": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AboveOrBelowEnum"
              }
            ],
            "default": "below"
          },
          "qedge_keys": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          },
          "qnode_keys": {
            "title": "Qnode Keys",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSequence_str_"
              }
            ],
            "default": []
          }
        },
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "FilterKgraphStdDevParameters": {
        "title": "FilterKgraphStdDevParameters",
        "required": ["edge_attribute"],
        "type": "object",
        "properties": {
          "edge_attribute": {
            "title": "Edge Attribute",
            "type": "string"
          },
          "plus_or_minus_std_dev": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlusOrMinusEnum"
              }
            ],
            "default": "plus"
          },
          "num_sigma": {
            "title": "Num Sigma",
            "minimum": 0,
            "type": "number",
            "default": 1
          },
          "remove_above_or_below": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AboveOrBelowEnum"
              }
            ],
            "default": "below"
          },
          "qedge_keys": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          },
          "qnode_keys": {
            "title": "Qnode Keys",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSequence_str_"
              }
            ],
            "default": []
          }
        },
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "FilterKgraphTopNParameters": {
        "title": "FilterKgraphTopNParameters",
        "required": ["edge_attribute"],
        "type": "object",
        "properties": {
          "edge_attribute": {
            "title": "Edge Attribute",
            "type": "string"
          },
          "max_edges": {
            "title": "Max Edges",
            "maximum": 0,
            "type": "integer",
            "default": 50
          },
          "remove_top_or_bottom": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TopOrBottomEnum"
              }
            ],
            "default": "top"
          },
          "qedge_keys": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          },
          "qnode_keys": {
            "title": "Qnode Keys",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSequence_str_"
              }
            ],
            "default": []
          }
        },
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "FilterResultsTopNParameters": {
        "title": "FilterResultsTopNParameters",
        "required": ["max_results"],
        "type": "object",
        "properties": {
          "max_results": {
            "title": "Max Results",
            "minimum": 0,
            "type": "integer"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "HashableMapping_CURIE__Node_": {
        "title": "HashableMapping[CURIE, Node]",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/Node"
        },
        "description": "Custom class that implements MutableMapping and is hashable",
        "default": {}
      },
      "HashableMapping_EdgeIdentifier__Edge_": {
        "title": "HashableMapping[EdgeIdentifier, Edge]",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/Edge"
        },
        "description": "Custom class that implements MutableMapping and is hashable",
        "default": {}
      },
      "HashableMapping_str__AuxiliaryGraph_": {
        "title": "HashableMapping[str, AuxiliaryGraph]",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/AuxiliaryGraph"
        },
        "description": "Custom class that implements MutableMapping and is hashable",
        "default": {}
      },
      "HashableMapping_str__HashableSet_EdgeBinding__": {
        "title": "HashableMapping[str, HashableSet[EdgeBinding]]",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/HashableSet_EdgeBinding_"
        },
        "description": "Custom class that implements MutableMapping and is hashable",
        "default": {}
      },
      "HashableMapping_str__HashableSet_NodeBinding__": {
        "title": "HashableMapping[str, HashableSet[NodeBinding]]",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/HashableSet_NodeBinding_"
        },
        "description": "Custom class that implements MutableMapping and is hashable",
        "default": {}
      },
      "HashableMapping_str__MetaNode_": {
        "title": "HashableMapping[str, MetaNode]",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/MetaNode"
        },
        "description": "Custom class that implements MutableMapping and is hashable",
        "default": {}
      },
      "HashableMapping_str__QEdge_": {
        "title": "HashableMapping[str, QEdge]",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/QEdge"
        },
        "description": "Custom class that implements MutableMapping and is hashable",
        "default": {}
      },
      "HashableMapping_str__QNode_": {
        "title": "HashableMapping[str, QNode]",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/QNode"
        },
        "description": "Custom class that implements MutableMapping and is hashable",
        "default": {}
      },
      "HashableSequence_AttributeConstraint_": {
        "title": "HashableSequence[AttributeConstraint]",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AttributeConstraint"
        },
        "description": "Custom class that implements MutableSequence and is hashable",
        "default": []
      },
      "HashableSequence_BiolinkEntity_": {
        "title": "HashableSequence[BiolinkEntity]",
        "type": "array",
        "items": {
          "pattern": "^biolink:[A-Z][a-zA-Z]*$",
          "type": "string"
        },
        "description": "Custom class that implements MutableSequence and is hashable",
        "default": []
      },
      "HashableSequence_BiolinkPredicate_": {
        "title": "HashableSequence[BiolinkPredicate]",
        "type": "array",
        "items": {
          "pattern": "^biolink:[a-z][a-z_]*$",
          "type": "string"
        },
        "description": "Custom class that implements MutableSequence and is hashable",
        "default": []
      },
      "HashableSequence_CURIE_": {
        "title": "HashableSequence[CURIE]",
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Custom class that implements MutableSequence and is hashable",
        "default": []
      },
      "HashableSequence_KnowledgeType_": {
        "title": "HashableSequence[KnowledgeType]",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/KnowledgeType"
        },
        "description": "Custom class that implements MutableSequence and is hashable",
        "default": []
      },
      "HashableSequence_MetaAttribute_": {
        "title": "HashableSequence[MetaAttribute]",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/MetaAttribute"
        },
        "description": "Custom class that implements MutableSequence and is hashable",
        "default": []
      },
      "HashableSequence_MetaEdge_": {
        "title": "HashableSequence[MetaEdge]",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/MetaEdge"
        },
        "description": "Custom class that implements MutableSequence and is hashable",
        "default": []
      },
      "HashableSequence_MetaQualifier_": {
        "title": "HashableSequence[MetaQualifier]",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/MetaQualifier"
        },
        "description": "Custom class that implements MutableSequence and is hashable",
        "default": []
      },
      "HashableSequence_Operation_": {
        "title": "HashableSequence[Operation]",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Operation"
        },
        "description": "Custom class that implements MutableSequence and is hashable",
        "default": []
      },
      "HashableSequence_QualifierConstraint_": {
        "title": "HashableSequence[QualifierConstraint]",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/QualifierConstraint"
        },
        "description": "Custom class that implements MutableSequence and is hashable",
        "default": []
      },
      "HashableSequence_Qualifier_": {
        "title": "HashableSequence[Qualifier]",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Qualifier"
        },
        "description": "Custom class that implements MutableSequence and is hashable",
        "default": []
      },
      "HashableSequence_RecursiveAttribute_": {
        "title": "HashableSequence[RecursiveAttribute]",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RecursiveAttribute"
        },
        "description": "Custom class that implements MutableSequence and is hashable",
        "default": []
      },
      "HashableSequence_Result_": {
        "title": "HashableSequence[Result]",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Result"
        },
        "description": "Custom class that implements MutableSequence and is hashable",
        "default": []
      },
      "HashableSequence_SubAttribute_": {
        "title": "HashableSequence[SubAttribute]",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SubAttribute"
        },
        "description": "Custom class that implements MutableSequence and is hashable",
        "default": []
      },
      "HashableSequence_str_": {
        "title": "HashableSequence[str]",
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Custom class that implements MutableSequence and is hashable",
        "default": []
      },
      "HashableSet_Analysis_": {
        "title": "HashableSet[Analysis]",
        "uniqueItems": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Analysis"
        },
        "description": "Custom class that implements MutableSet and is hashable",
        "default": []
      },
      "HashableSet_Attribute_": {
        "title": "HashableSet[Attribute]",
        "uniqueItems": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Attribute"
        },
        "description": "Custom class that implements MutableSet and is hashable",
        "default": []
      },
      "HashableSet_BiolinkEntity_": {
        "title": "HashableSet[BiolinkEntity]",
        "uniqueItems": true,
        "type": "array",
        "items": {
          "pattern": "^biolink:[A-Z][a-zA-Z]*$",
          "type": "string"
        },
        "description": "Custom class that implements MutableSet and is hashable",
        "default": []
      },
      "HashableSet_CURIE_": {
        "title": "HashableSet[CURIE]",
        "uniqueItems": true,
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Custom class that implements MutableSet and is hashable",
        "default": []
      },
      "HashableSet_EdgeBinding_": {
        "title": "HashableSet[EdgeBinding]",
        "uniqueItems": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/EdgeBinding"
        },
        "description": "Custom class that implements MutableSet and is hashable",
        "default": []
      },
      "HashableSet_NodeBinding_": {
        "title": "HashableSet[NodeBinding]",
        "uniqueItems": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/NodeBinding"
        },
        "description": "Custom class that implements MutableSet and is hashable",
        "default": []
      },
      "HashableSet_Qualifier_": {
        "title": "HashableSet[Qualifier]",
        "uniqueItems": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Qualifier"
        },
        "description": "Custom class that implements MutableSet and is hashable",
        "default": []
      },
      "HashableSet_RetrievalSource_": {
        "title": "HashableSet[RetrievalSource]",
        "uniqueItems": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RetrievalSource"
        },
        "description": "Custom class that implements MutableSet and is hashable",
        "default": []
      },
      "HashableSet_str_": {
        "title": "HashableSet[str]",
        "uniqueItems": true,
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Custom class that implements MutableSet and is hashable",
        "default": []
      },
      "KnowledgeGraph": {
        "title": "knowledge graph",
        "required": ["nodes", "edges"],
        "type": "object",
        "properties": {
          "nodes": {
            "title": "nodes",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableMapping_CURIE__Node_"
              }
            ]
          },
          "edges": {
            "title": "edges",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableMapping_EdgeIdentifier__Edge_"
              }
            ]
          }
        },
        "description": "Knowledge graph."
      },
      "KnowledgeType": {
        "title": "KnowledgeType",
        "enum": ["lookup", "inferred"],
        "type": "string",
        "description": "Knowledge Type."
      },
      "LogLevel": {
        "$ref": "#/components/schemas/LogLevelEnum",
        "title": "LogLevel",
        "description": "Log level."
      },
      "LogLevelEnum": {
        "title": "LogLevelEnum",
        "enum": ["ERROR", "WARNING", "INFO", "DEBUG"],
        "type": "string",
        "description": "Log level."
      },
      "Message": {
        "title": "message",
        "type": "object",
        "properties": {
          "query_graph": {
            "title": "query graph",
            "allOf": [
              {
                "$ref": "#/components/schemas/QueryGraph"
              }
            ],
            "nullable": true
          },
          "knowledge_graph": {
            "title": "knowledge graph",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeGraph"
              }
            ],
            "nullable": true
          },
          "results": {
            "title": "list of results",
            "allOf": [
              {
                "$ref": "#/components/schemas/Results"
              }
            ],
            "nullable": true
          },
          "auxiliary_graphs": {
            "title": "dict of auxiliary graphs",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuxiliaryGraphs"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Message."
      },
      "MetaAttribute": {
        "title": "MetaAttribute",
        "required": ["attribute_type_id"],
        "type": "object",
        "properties": {
          "attribute_type_id": {
            "title": "Attribute Type Id",
            "type": "string"
          },
          "attribute_source": {
            "title": "Attribute Source",
            "type": "string"
          },
          "original_attribute_names": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          },
          "constraint_use": {
            "title": "Constraint Use",
            "type": "boolean",
            "default": false
          },
          "constraint_name": {
            "title": "Constraint Name",
            "type": "string"
          }
        },
        "description": "MetaAttribute."
      },
      "MetaEdge": {
        "title": "MetaEdge",
        "required": ["subject", "predicate", "object"],
        "type": "object",
        "properties": {
          "subject": {
            "title": "Subject",
            "pattern": "^biolink:[A-Z][a-zA-Z]*$",
            "type": "string"
          },
          "predicate": {
            "title": "Predicate",
            "pattern": "^biolink:[a-z][a-z_]*$",
            "type": "string"
          },
          "object": {
            "title": "Object",
            "pattern": "^biolink:[A-Z][a-zA-Z]*$",
            "type": "string"
          },
          "qualifiers": {
            "$ref": "#/components/schemas/HashableSequence_MetaQualifier_"
          },
          "attributes": {
            "$ref": "#/components/schemas/HashableSequence_MetaAttribute_"
          },
          "knowledge_types": {
            "$ref": "#/components/schemas/HashableSequence_KnowledgeType_"
          },
          "association": {
            "title": "Association",
            "pattern": "^biolink:[A-Z][a-zA-Z]*$",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "MetaKnowledgeGraph": {
        "title": "MetaKnowledgeGraph",
        "required": ["nodes", "edges"],
        "type": "object",
        "properties": {
          "nodes": {
            "$ref": "#/components/schemas/HashableMapping_str__MetaNode_"
          },
          "edges": {
            "$ref": "#/components/schemas/HashableSequence_MetaEdge_"
          }
        },
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "MetaNode": {
        "title": "MetaNode",
        "required": ["id_prefixes"],
        "type": "object",
        "properties": {
          "id_prefixes": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          },
          "attributes": {
            "$ref": "#/components/schemas/HashableSequence_MetaAttribute_"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "MetaQualifier": {
        "title": "MetaQualifier",
        "required": ["qualifier_type_id"],
        "type": "object",
        "properties": {
          "qualifier_type_id": {
            "title": "Qualifier Type Id",
            "type": "string"
          },
          "applicable_values": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          }
        },
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "Node": {
        "title": "knowledge-graph node",
        "required": ["categories", "attributes"],
        "type": "object",
        "properties": {
          "categories": {
            "title": "categories",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSet_BiolinkEntity_"
              }
            ],
            "nullable": false
          },
          "name": {
            "title": "Name",
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "title": "Attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSet_Attribute_"
              }
            ],
            "nullable": false
          },
          "is_set": {
            "title": "Is Set",
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Knowledge graph node.",
        "example": {
          "category": "string"
        }
      },
      "NodeBinding": {
        "title": "node binding",
        "required": ["id", "attributes"],
        "type": "object",
        "properties": {
          "id": {
            "title": "knowledge graph id",
            "type": "string",
            "nullable": false
          },
          "query_id": {
            "title": "query graph id",
            "type": "string"
          },
          "attributes": {
            "title": "Attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSet_Attribute_"
              }
            ],
            "nullable": false
          }
        },
        "description": "Node binding.",
        "example": {
          "id": "x:string"
        }
      },
      "Operation": {
        "title": "Operation",
        "anyOf": [
          {
            "$ref": "#/components/schemas/OperationAnnotate"
          },
          {
            "$ref": "#/components/schemas/OperationAnnotateEdges"
          },
          {
            "$ref": "#/components/schemas/OperationAnnotateNodes"
          },
          {
            "$ref": "#/components/schemas/OperationBind"
          },
          {
            "$ref": "#/components/schemas/OperationCompleteResults"
          },
          {
            "$ref": "#/components/schemas/OperationEnrichResults"
          },
          {
            "$ref": "#/components/schemas/OperationFill"
          },
          {
            "$ref": "#/components/schemas/OperationFilterKgraph"
          },
          {
            "$ref": "#/components/schemas/OperationFilterKgraphContinuousKedgeAttribute"
          },
          {
            "$ref": "#/components/schemas/OperationFilterKgraphDiscreteKedgeAttribute"
          },
          {
            "$ref": "#/components/schemas/OperationFilterKgraphDiscreteKnodeAttribute"
          },
          {
            "$ref": "#/components/schemas/OperationFilterKgraphOrphans"
          },
          {
            "$ref": "#/components/schemas/OperationFilterKgraphPercentile"
          },
          {
            "$ref": "#/components/schemas/OperationFilterKgraphStdDev"
          },
          {
            "$ref": "#/components/schemas/OperationFilterKgraphTopN"
          },
          {
            "$ref": "#/components/schemas/OperationFilterResults"
          },
          {
            "$ref": "#/components/schemas/OperationFilterResultsTopN"
          },
          {
            "$ref": "#/components/schemas/OperationLookup"
          },
          {
            "$ref": "#/components/schemas/OperationLookupAndScore"
          },
          {
            "$ref": "#/components/schemas/OperationOverlay"
          },
          {
            "$ref": "#/components/schemas/OperationOverlayComputeJaccard"
          },
          {
            "$ref": "#/components/schemas/OperationOverlayComputeNgd"
          },
          {
            "$ref": "#/components/schemas/OperationOverlayConnectKnodes"
          },
          {
            "$ref": "#/components/schemas/OperationOverlayFisherExactTest"
          },
          {
            "$ref": "#/components/schemas/OperationRestate"
          },
          {
            "$ref": "#/components/schemas/OperationScore"
          },
          {
            "$ref": "#/components/schemas/OperationSortResults"
          },
          {
            "$ref": "#/components/schemas/OperationSortResultsEdgeAttribute"
          },
          {
            "$ref": "#/components/schemas/OperationSortResultsNodeAttribute"
          },
          {
            "$ref": "#/components/schemas/OperationSortResultsScore"
          }
        ],
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationAnnotate": {
        "title": "OperationAnnotate",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/annotate"
          },
          "parameters": {
            "title": "Parameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationAnnotateEdges": {
        "title": "OperationAnnotateEdges",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/annotate_edges"
          },
          "parameters": {
            "$ref": "#/components/schemas/AnnotateEdgesParameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationAnnotateNodes": {
        "title": "OperationAnnotateNodes",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/annotate_nodes"
          },
          "parameters": {
            "$ref": "#/components/schemas/AnnotateNodesParameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationBind": {
        "title": "OperationBind",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/bind"
          },
          "parameters": {
            "title": "Parameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationCompleteResults": {
        "title": "OperationCompleteResults",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/complete_results"
          },
          "parameters": {
            "title": "Parameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationEnrichResults": {
        "title": "OperationEnrichResults",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/enrich_results"
          },
          "parameters": {
            "$ref": "#/components/schemas/EnrichResultsParameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationFill": {
        "title": "OperationFill",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/fill"
          },
          "parameters": {
            "$ref": "#/components/schemas/FillParameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationFilterKgraph": {
        "title": "OperationFilterKgraph",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/filter_kgraph"
          },
          "parameters": {
            "title": "Parameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationFilterKgraphContinuousKedgeAttribute": {
        "title": "OperationFilterKgraphContinuousKedgeAttribute",
        "required": ["id", "parameters"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/filter_kgraph_continuous_kedge_attribute"
          },
          "parameters": {
            "$ref": "#/components/schemas/FilterKgraphContinuousKedgeAttributeParameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationFilterKgraphDiscreteKedgeAttribute": {
        "title": "OperationFilterKgraphDiscreteKedgeAttribute",
        "required": ["id", "parameters"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/filter_kgraph_discrete_kedge_attribute"
          },
          "parameters": {
            "$ref": "#/components/schemas/FilterKgraphDiscreteKedgeAttributeParameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationFilterKgraphDiscreteKnodeAttribute": {
        "title": "OperationFilterKgraphDiscreteKnodeAttribute",
        "required": ["id", "parameters"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/filter_kgraph_discrete_knode_attribute"
          },
          "parameters": {
            "$ref": "#/components/schemas/FilterKgraphDiscreteKnodeAttributeParameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationFilterKgraphOrphans": {
        "title": "OperationFilterKgraphOrphans",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/filter_kgraph_orphans"
          },
          "parameters": {
            "title": "Parameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationFilterKgraphPercentile": {
        "title": "OperationFilterKgraphPercentile",
        "required": ["id", "parameters"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/filter_kgraph_percentile"
          },
          "parameters": {
            "$ref": "#/components/schemas/FilterKgraphPercentileParameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationFilterKgraphStdDev": {
        "title": "OperationFilterKgraphStdDev",
        "required": ["id", "parameters"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/filter_kgraph_std_dev"
          },
          "parameters": {
            "$ref": "#/components/schemas/FilterKgraphStdDevParameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationFilterKgraphTopN": {
        "title": "OperationFilterKgraphTopN",
        "required": ["id", "parameters"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/filter_kgraph_top_n"
          },
          "parameters": {
            "$ref": "#/components/schemas/FilterKgraphTopNParameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationFilterResults": {
        "title": "OperationFilterResults",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/filter_results"
          },
          "parameters": {
            "title": "Parameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationFilterResultsTopN": {
        "title": "OperationFilterResultsTopN",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/filter_results_top_n"
          },
          "parameters": {
            "$ref": "#/components/schemas/FilterResultsTopNParameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationLookup": {
        "title": "OperationLookup",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/lookup"
          },
          "parameters": {
            "title": "Parameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationLookupAndScore": {
        "title": "OperationLookupAndScore",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/lookup_and_score"
          },
          "parameters": {
            "title": "Parameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationOverlay": {
        "title": "OperationOverlay",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/overlay"
          },
          "parameters": {
            "title": "Parameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationOverlayComputeJaccard": {
        "title": "OperationOverlayComputeJaccard",
        "required": ["id", "parameters"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/overlay_compute_jaccard"
          },
          "parameters": {
            "$ref": "#/components/schemas/OverlayComputeJaccardParameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationOverlayComputeNgd": {
        "title": "OperationOverlayComputeNgd",
        "required": ["id", "parameters"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/overlay_compute_ngd"
          },
          "parameters": {
            "$ref": "#/components/schemas/OverlayComputeNgdParameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationOverlayConnectKnodes": {
        "title": "OperationOverlayConnectKnodes",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/overlay_connect_knodes"
          },
          "parameters": {
            "title": "Parameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationOverlayFisherExactTest": {
        "title": "OperationOverlayFisherExactTest",
        "required": ["id", "parameters"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/overlay_fisher_exact_test"
          },
          "parameters": {
            "$ref": "#/components/schemas/OverlayFisherExactTestParameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationRestate": {
        "title": "OperationRestate",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/restate"
          },
          "parameters": {
            "title": "Parameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationScore": {
        "title": "OperationScore",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/score"
          },
          "parameters": {
            "title": "Parameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationSortResults": {
        "title": "OperationSortResults",
        "required": ["id"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/sort_results"
          },
          "parameters": {
            "title": "Parameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationSortResultsEdgeAttribute": {
        "title": "OperationSortResultsEdgeAttribute",
        "required": ["id", "parameters"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/sort_results_edge_attribute"
          },
          "parameters": {
            "$ref": "#/components/schemas/SortResultsEdgeAttributeParameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationSortResultsNodeAttribute": {
        "title": "OperationSortResultsNodeAttribute",
        "required": ["id", "parameters"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/sort_results_node_attribute"
          },
          "parameters": {
            "$ref": "#/components/schemas/SortResultsNodeAttributeParameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OperationSortResultsScore": {
        "title": "OperationSortResultsScore",
        "required": ["id", "parameters"],
        "type": "object",
        "properties": {
          "runner_parameters": {
            "$ref": "#/components/schemas/RunnerParameters"
          },
          "id": {
            "$ref": "#/components/schemas/sort_results_score"
          },
          "parameters": {
            "$ref": "#/components/schemas/SortResultsScoreParameters"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "Operator": {
        "title": "Operator",
        "enum": ["==", "===", ">", "<", "matches"],
        "type": "string",
        "description": "Operator."
      },
      "OverlayComputeJaccardParameters": {
        "title": "OverlayComputeJaccardParameters",
        "required": [
          "intermediate_node_key",
          "end_node_keys",
          "virtual_relation_label"
        ],
        "type": "object",
        "properties": {
          "intermediate_node_key": {
            "title": "Intermediate Node Key",
            "type": "string"
          },
          "end_node_keys": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          },
          "virtual_relation_label": {
            "title": "Virtual Relation Label",
            "type": "string"
          }
        },
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OverlayComputeNgdParameters": {
        "title": "OverlayComputeNgdParameters",
        "required": ["qnode_keys", "virtual_relation_label"],
        "type": "object",
        "properties": {
          "qnode_keys": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          },
          "virtual_relation_label": {
            "title": "Virtual Relation Label",
            "type": "string"
          }
        },
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "OverlayFisherExactTestParameters": {
        "title": "OverlayFisherExactTestParameters",
        "required": [
          "subject_qnode_key",
          "object_qnode_key",
          "virtual_relation_label"
        ],
        "type": "object",
        "properties": {
          "subject_qnode_key": {
            "title": "Subject Qnode Key",
            "type": "string"
          },
          "object_qnode_key": {
            "title": "Object Qnode Key",
            "type": "string"
          },
          "virtual_relation_label": {
            "title": "Virtual Relation Label",
            "type": "string"
          },
          "rel_edge_key": {
            "title": "Rel Edge Key",
            "type": "string"
          }
        },
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "PlusOrMinusEnum": {
        "title": "PlusOrMinusEnum",
        "enum": ["plus", "minus"],
        "type": "string",
        "description": "'plus' or 'minus'."
      },
      "QEdge": {
        "title": "query-graph edge",
        "required": ["subject", "object"],
        "type": "object",
        "properties": {
          "subject": {
            "title": "subject node id",
            "type": "string"
          },
          "object": {
            "title": "object node id",
            "type": "string"
          },
          "knowledge_type": {
            "title": "knowledge type",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeType"
              }
            ]
          },
          "predicates": {
            "title": "predicates",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSequence_BiolinkPredicate_"
              }
            ],
            "nullable": true
          },
          "attribute_constraints": {
            "title": "attribute constraints",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSequence_AttributeConstraint_"
              }
            ],
            "default": {
              "__root__": []
            }
          },
          "qualifier_constraints": {
            "title": "qualifier constraint",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSequence_QualifierConstraint_"
              }
            ],
            "default": {
              "__root__": []
            }
          }
        },
        "description": "Query edge."
      },
      "QNode": {
        "title": "query-graph node",
        "type": "object",
        "properties": {
          "ids": {
            "title": "ids",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSequence_CURIE_"
              }
            ],
            "nullable": true
          },
          "categories": {
            "title": "categories",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSequence_BiolinkEntity_"
              }
            ],
            "nullable": true
          },
          "set_interpretation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SetInterpretationEnum"
              }
            ],
            "default": "BATCH",
            "nullable": true
          },
          "constraints": {
            "title": "attribute constraints",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSequence_AttributeConstraint_"
              }
            ],
            "default": {
              "__root__": []
            }
          },
          "member_ids": {
            "title": "set member ids",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSequence_CURIE_"
              }
            ],
            "default": {
              "__root__": []
            }
          }
        },
        "description": "Query node."
      },
      "Qualifier": {
        "title": "Qualifier",
        "required": ["qualifier_type_id", "qualifier_value"],
        "type": "object",
        "properties": {
          "qualifier_type_id": {
            "title": "type",
            "pattern": "^biolink:[a-z][a-z_]*$",
            "type": "string"
          },
          "qualifier_value": {
            "title": "value",
            "type": "string"
          }
        },
        "description": "Edge qualifier."
      },
      "QualifierConstraint": {
        "title": "QualifierConstraint",
        "type": "object",
        "properties": {
          "qualifier_set": {
            "title": "qualifier set",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSequence_Qualifier_"
              }
            ],
            "default": {
              "__root__": []
            }
          }
        },
        "description": "QEdge Qualifier constraint."
      },
      "QueryGraph": {
        "title": "simple query graph",
        "required": ["nodes", "edges"],
        "type": "object",
        "properties": {
          "nodes": {
            "title": "dict of nodes",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableMapping_str__QNode_"
              }
            ]
          },
          "edges": {
            "title": "dict of edges",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableMapping_str__QEdge_"
              }
            ]
          }
        },
        "description": "Query graph."
      },
      "ReasonerRequest": {
        "title": "query",
        "required": ["message"],
        "type": "object",
        "properties": {
          "message": {
            "title": "message",
            "allOf": [
              {
                "$ref": "#/components/schemas/Message"
              }
            ]
          },
          "log_level": {
            "title": "log_level",
            "allOf": [
              {
                "$ref": "#/components/schemas/LogLevel"
              }
            ],
            "nullable": true
          },
          "workflow": {
            "$ref": "#/components/schemas/Workflow"
          },
          "bypass_cache": {
            "title": "Bypass Cache",
            "type": "boolean"
          }
        },
        "description": "Request.",
        "x-body-name": "request_body"
      },
      "RecursiveAttribute": {
        "title": "RecursiveAttribute",
        "required": ["attribute_type_id", "value"],
        "type": "object",
        "properties": {
          "attribute_type_id": {
            "title": "type",
            "type": "string"
          },
          "value": {
            "title": "value"
          },
          "value_type_id": {
            "title": "value_type_id",
            "type": "string",
            "nullable": true
          },
          "original_attribute_name": {
            "title": "Original Attribute Name",
            "type": "string",
            "nullable": true
          },
          "value_url": {
            "title": "Value Url",
            "type": "string",
            "nullable": true
          },
          "attribute_source": {
            "title": "Attribute Source",
            "type": "string",
            "nullable": true
          },
          "description": {
            "title": "Description",
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "title": "Attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSequence_RecursiveAttribute_"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Attribute subattribute."
      },
      "ResourceRoleEnum": {
        "title": "ResourceRoleEnum",
        "enum": [
          "aggregator_knowledge_source",
          "primary_knowledge_source",
          "supporting_data_source"
        ],
        "type": "string",
        "description": "Types of resources"
      },
      "Result": {
        "title": "result",
        "required": ["node_bindings", "analyses"],
        "type": "object",
        "properties": {
          "node_bindings": {
            "title": "list of node bindings",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableMapping_str__HashableSet_NodeBinding__"
              }
            ],
            "nullable": false
          },
          "analyses": {
            "title": "list of anlysis blocks",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSet_Analysis_"
              }
            ],
            "nullable": false
          }
        },
        "description": "Result."
      },
      "Results": {
        "$ref": "#/components/schemas/HashableSequence_Result_",
        "title": "results",
        "description": "Results."
      },
      "RetrievalSource": {
        "title": "RetrievalSource",
        "required": ["resource_id", "resource_role"],
        "type": "object",
        "properties": {
          "resource_id": {
            "title": "infores for source",
            "type": "string"
          },
          "resource_role": {
            "title": "source type",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceRoleEnum"
              }
            ]
          },
          "upstream_resource_ids": {
            "title": "Upstream Resource Ids",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSet_CURIE_"
              }
            ],
            "nullable": true
          },
          "source_record_urls": {
            "title": "Source Record Urls",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSet_str_"
              }
            ],
            "nullable": true
          }
        },
        "description": "A component of source retrieval provenance"
      },
      "RunnerAllowList": {
        "title": "RunnerAllowList",
        "type": "object",
        "properties": {
          "allowlist": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          },
          "timeout": {
            "title": "Timeout",
            "type": "number"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "RunnerDenyList": {
        "title": "RunnerDenyList",
        "type": "object",
        "properties": {
          "denylist": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          },
          "timeout": {
            "title": "Timeout",
            "type": "number"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "RunnerParameters": {
        "title": "RunnerParameters",
        "anyOf": [
          {
            "$ref": "#/components/schemas/RunnerAllowList"
          },
          {
            "$ref": "#/components/schemas/RunnerDenyList"
          },
          {
            "$ref": "#/components/schemas/RunnerTimeout"
          }
        ],
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "RunnerTimeout": {
        "title": "RunnerTimeout",
        "type": "object",
        "properties": {
          "timeout": {
            "title": "Timeout",
            "type": "number"
          }
        },
        "additionalProperties": false,
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "SRITestData": {
        "title": "SRITestData",
        "required": ["version", "source_type", "edges"],
        "type": "object",
        "properties": {
          "version": {
            "title": "Version",
            "type": "string"
          },
          "source_type": {
            "title": "Source Type",
            "type": "string"
          },
          "edges": {
            "title": "Edges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SRITestEdge"
            }
          }
        }
      },
      "SRITestEdge": {
        "title": "SRITestEdge",
        "required": [
          "subject_id",
          "object_id",
          "predicate",
          "subject_category",
          "object_category"
        ],
        "type": "object",
        "properties": {
          "subject_id": {
            "title": "Subject Id",
            "type": "string"
          },
          "object_id": {
            "title": "Object Id",
            "type": "string"
          },
          "predicate": {
            "title": "Predicate",
            "type": "string"
          },
          "subject_category": {
            "title": "Subject Category",
            "type": "string"
          },
          "object_category": {
            "title": "Object Category",
            "type": "string"
          },
          "qualifiers": {
            "title": "Qualifiers",
            "type": "array",
            "items": {}
          }
        }
      },
      "SetInterpretationEnum": {
        "title": "SetInterpretationEnum",
        "enum": ["BATCH", "ALL", "MANY"],
        "type": "string",
        "description": "Enumeration for set interpretation."
      },
      "SimpleSpecElement": {
        "title": "SimpleSpecElement",
        "required": ["source_type", "target_type", "edge_type"],
        "type": "object",
        "properties": {
          "source_type": {
            "title": "Source Type",
            "type": "string"
          },
          "target_type": {
            "title": "Target Type",
            "type": "string"
          },
          "edge_type": {
            "title": "Edge Type",
            "type": "string"
          }
        }
      },
      "SortResultsEdgeAttributeParameters": {
        "title": "SortResultsEdgeAttributeParameters",
        "required": ["edge_attribute", "ascending_or_descending"],
        "type": "object",
        "properties": {
          "edge_attribute": {
            "title": "Edge Attribute",
            "type": "string"
          },
          "ascending_or_descending": {
            "$ref": "#/components/schemas/AscOrDescEnum"
          },
          "qedge_keys": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          }
        },
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "SortResultsNodeAttributeParameters": {
        "title": "SortResultsNodeAttributeParameters",
        "required": ["node_attribute", "ascending_or_descending"],
        "type": "object",
        "properties": {
          "node_attribute": {
            "title": "Node Attribute",
            "type": "string"
          },
          "ascending_or_descending": {
            "$ref": "#/components/schemas/AscOrDescEnum"
          },
          "qnode_keys": {
            "$ref": "#/components/schemas/HashableSequence_str_"
          }
        },
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "SortResultsScoreParameters": {
        "title": "SortResultsScoreParameters",
        "required": ["ascending_or_descending"],
        "type": "object",
        "properties": {
          "ascending_or_descending": {
            "$ref": "#/components/schemas/AscOrDescEnum"
          }
        },
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "SubAttribute": {
        "title": "SubAttribute",
        "required": ["attribute_type_id", "value"],
        "type": "object",
        "properties": {
          "attribute_type_id": {
            "title": "type",
            "type": "string"
          },
          "value": {
            "title": "value"
          },
          "value_type_id": {
            "title": "value_type_id",
            "type": "string",
            "nullable": true
          },
          "original_attribute_name": {
            "title": "Original Attribute Name",
            "type": "string",
            "nullable": true
          },
          "value_url": {
            "title": "Value Url",
            "type": "string",
            "nullable": true
          },
          "attribute_source": {
            "title": "Attribute Source",
            "type": "string",
            "nullable": true
          },
          "description": {
            "title": "Description",
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "title": "Attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/HashableSequence_RecursiveAttribute_"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Attribute subattribute."
      },
      "TopOrBottomEnum": {
        "title": "TopOrBottomEnum",
        "enum": ["top", "bottom"],
        "type": "string",
        "description": "'top' or 'bottom'."
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": ["loc", "msg", "type"],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "Workflow": {
        "$ref": "#/components/schemas/HashableSequence_Operation_",
        "title": "Workflow",
        "description": "Custom base model for all classes\n\nThis provides hash and equality methods."
      },
      "annotate": {
        "title": "annotate",
        "enum": ["annotate"],
        "type": "string",
        "description": "An enumeration."
      },
      "annotate_edges": {
        "title": "annotate_edges",
        "enum": ["annotate_edges"],
        "type": "string",
        "description": "An enumeration."
      },
      "annotate_nodes": {
        "title": "annotate_nodes",
        "enum": ["annotate_nodes"],
        "type": "string",
        "description": "An enumeration."
      },
      "bind": {
        "title": "bind",
        "enum": ["bind"],
        "type": "string",
        "description": "An enumeration."
      },
      "complete_results": {
        "title": "complete_results",
        "enum": ["complete_results"],
        "type": "string",
        "description": "An enumeration."
      },
      "enrich_results": {
        "title": "enrich_results",
        "enum": ["enrich_results"],
        "type": "string",
        "description": "An enumeration."
      },
      "fill": {
        "title": "fill",
        "enum": ["fill"],
        "type": "string",
        "description": "An enumeration."
      },
      "filter_kgraph": {
        "title": "filter_kgraph",
        "enum": ["filter_kgraph"],
        "type": "string",
        "description": "An enumeration."
      },
      "filter_kgraph_continuous_kedge_attribute": {
        "title": "filter_kgraph_continuous_kedge_attribute",
        "enum": ["filter_kgraph_continuous_kedge_attribute"],
        "type": "string",
        "description": "An enumeration."
      },
      "filter_kgraph_discrete_kedge_attribute": {
        "title": "filter_kgraph_discrete_kedge_attribute",
        "enum": ["filter_kgraph_discrete_kedge_attribute"],
        "type": "string",
        "description": "An enumeration."
      },
      "filter_kgraph_discrete_knode_attribute": {
        "title": "filter_kgraph_discrete_knode_attribute",
        "enum": ["filter_kgraph_discrete_knode_attribute"],
        "type": "string",
        "description": "An enumeration."
      },
      "filter_kgraph_orphans": {
        "title": "filter_kgraph_orphans",
        "enum": ["filter_kgraph_orphans"],
        "type": "string",
        "description": "An enumeration."
      },
      "filter_kgraph_percentile": {
        "title": "filter_kgraph_percentile",
        "enum": ["filter_kgraph_percentile"],
        "type": "string",
        "description": "An enumeration."
      },
      "filter_kgraph_std_dev": {
        "title": "filter_kgraph_std_dev",
        "enum": ["filter_kgraph_std_dev"],
        "type": "string",
        "description": "An enumeration."
      },
      "filter_kgraph_top_n": {
        "title": "filter_kgraph_top_n",
        "enum": ["filter_kgraph_top_n"],
        "type": "string",
        "description": "An enumeration."
      },
      "filter_results": {
        "title": "filter_results",
        "enum": ["filter_results"],
        "type": "string",
        "description": "An enumeration."
      },
      "filter_results_top_n": {
        "title": "filter_results_top_n",
        "enum": ["filter_results_top_n"],
        "type": "string",
        "description": "An enumeration."
      },
      "lookup": {
        "title": "lookup",
        "enum": ["lookup"],
        "type": "string",
        "description": "An enumeration."
      },
      "lookup_and_score": {
        "title": "lookup_and_score",
        "enum": ["lookup_and_score"],
        "type": "string",
        "description": "An enumeration."
      },
      "overlay": {
        "title": "overlay",
        "enum": ["overlay"],
        "type": "string",
        "description": "An enumeration."
      },
      "overlay_compute_jaccard": {
        "title": "overlay_compute_jaccard",
        "enum": ["overlay_compute_jaccard"],
        "type": "string",
        "description": "An enumeration."
      },
      "overlay_compute_ngd": {
        "title": "overlay_compute_ngd",
        "enum": ["overlay_compute_ngd"],
        "type": "string",
        "description": "An enumeration."
      },
      "overlay_connect_knodes": {
        "title": "overlay_connect_knodes",
        "enum": ["overlay_connect_knodes"],
        "type": "string",
        "description": "An enumeration."
      },
      "overlay_fisher_exact_test": {
        "title": "overlay_fisher_exact_test",
        "enum": ["overlay_fisher_exact_test"],
        "type": "string",
        "description": "An enumeration."
      },
      "restate": {
        "title": "restate",
        "enum": ["restate"],
        "type": "string",
        "description": "An enumeration."
      },
      "score": {
        "title": "score",
        "enum": ["score"],
        "type": "string",
        "description": "An enumeration."
      },
      "sort_results": {
        "title": "sort_results",
        "enum": ["sort_results"],
        "type": "string",
        "description": "An enumeration."
      },
      "sort_results_edge_attribute": {
        "title": "sort_results_edge_attribute",
        "enum": ["sort_results_edge_attribute"],
        "type": "string",
        "description": "An enumeration."
      },
      "sort_results_node_attribute": {
        "title": "sort_results_node_attribute",
        "enum": ["sort_results_node_attribute"],
        "type": "string",
        "description": "An enumeration."
      },
      "sort_results_score": {
        "title": "sort_results_score",
        "enum": ["sort_results_score"],
        "type": "string",
        "description": "An enumeration."
      }
    }
  }
}
