"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7561],{66242:(e,t,a)=>{a.d(t,{Z:()=>_});var n=a(67294),r=a(86010),o=a(53438),c=a(39960),i=a(13919),s=a(95999);const l={cardContainer:"cardContainer_S8oU",cardTitle:"cardTitle_HoSo",cardDescription:"cardDescription_c27F",info:"info_QY_6"};function d(e){let{href:t,children:a}=e;return n.createElement(c.Z,{href:t,className:(0,r.Z)("card padding--lg",l.cardContainer)},a)}function u(e){let{href:t,icon:a,title:o,description:c,info:i}=e;return n.createElement(d,{href:t},n.createElement("h2",{className:(0,r.Z)("text--truncate",l.cardTitle),title:o},a," ",o),c&&n.createElement("p",{className:(0,r.Z)("text--truncate",l.cardDescription),title:c},c),i&&n.createElement("p",{title:i,className:l.info},i))}const p=new Map([["RENCI SRI Reference KG","biolink"],["ctd","ctd"],["DrugCentral","drugcentral"],["GTEx","gtex"],["GtoPdb","gtopdb"],["GWAS Catalog","gwas-catalog"],["Hetionet","hetio"],["HGNC","hgnc"],["hmdb","hmdb"],["Human GOA","human-goa"],["icees-kg","icees-kg"],["InTact","intact"],["Ubergraph Redundant","ontological-hierarchy"],["PANTHER","panther"],["Pharos","pharos"],["ROBOKOP KG","robokopkg"],["SRI Reference KG","sri-reference-kg"],["STRING","string-db"],["Ubergraph","uberongraph"],["Viral Proteome","viral-proteome"]]),m=async e=>{if(!p.has(e))return null;try{const t=await fetch(`https://automat.renci.org/${p.get(e)}/metadata`,{method:"GET",headers:{"Content-Type":"application/json"}}),{final_node_count:a,final_edge_count:n,graph_description:r}=await t.json();return{final_node_count:parseInt(a).toLocaleString(),final_edge_count:parseInt(n).toLocaleString(),description:r}}catch{return null}};function g(e){let{item:t}=e;const a=(0,o.Wl)(t),[r,c]=(0,n.useState)(null);return(0,n.useEffect)((()=>{(async()=>{c(await m(t.label))})()}),[]),a?n.createElement(u,{href:a,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:(0,s.I)({message:r&&"NaN"!==r.final_edge_count&&"NaN"!==r.final_node_count?"{final_node_count} nodes, {final_edge_count} edges":"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length,final_node_count:r?.final_node_count,final_edge_count:r?.final_edge_count}),info:r?.description}):null}function h(e){let{item:t}=e;const a=(0,i.Z)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",r=(0,o.xz)(t.docId??void 0);return n.createElement(u,{href:t.href,icon:a,title:t.label,description:r?.description})}function f(e){let{item:t}=e;switch(t.type){case"link":return n.createElement(h,{item:t});case"category":return n.createElement(g,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function b(e){let{className:t}=e;const a=(0,o.jA)();return n.createElement(_,{items:a.items,className:t})}function _(e){const{items:t,className:a}=e;if(!t)return n.createElement(b,e);const c=(0,o.MN)(t);return n.createElement("section",{className:(0,r.Z)("row",a)},c.map(((e,t)=>n.createElement("article",{key:t,className:"col col--6 margin-bottom--lg"},n.createElement(f,{item:e})))))}},73879:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=a(87462),r=(a(67294),a(3905)),o=a(66242),c=a(53438);const i={id:"ubergraph-redundant",title:"Ubergraph Redundant",description:"Ubergraph Redundant",custom_edit_url:null},s=void 0,l={unversionedId:"automat/ubergraph-redundant",id:"automat/ubergraph-redundant",title:"Ubergraph Redundant",description:"Ubergraph Redundant",source:"@site/docs/automat/ubergraph-redundant.tag.mdx",sourceDirName:"automat",slug:"/automat/ubergraph-redundant",permalink:"/api-docs/docs/automat/ubergraph-redundant",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"ubergraph-redundant",title:"Ubergraph Redundant",description:"Ubergraph Redundant",custom_edit_url:null},sidebar:"openApiSidebar",previous:{title:"Get one-hop connection schema",permalink:"/api-docs/docs/automat/simple-spec-simple-spec-get-3-b-3-e-61-b-2-a-544-4554-83-a-2-be-47633-b-6-ca-0"},next:{title:"Meta knowledge graph representation of this TRAPI web service.",permalink:"/api-docs/docs/automat/get-meta-knowledge-graph-1-3-meta-knowledge-graph-get-38-d-5-d-9-b-7-5781-4-a-09-a-785-f-970102-c-9-aa-1"}},d={},u=[],p={toc:u},m="wrapper";function g(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Subclass relationships from the redundant version of Ubergraph. The redundant version of Ubergraph is the complete inference closure for all subclass and existential relations. This includes all transitive, reflexive subclass relations."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Version:")," c94a9337ce64c21d"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"URL:")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/INCATools/ubergraph"},"https://github.com/INCATools/ubergraph")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Neo4J:")," ",(0,r.kt)("a",{parentName:"p",href:"https://stars.renci.org/var/plater/bl-3.1.2/OntologicalHierarchy_Automat/c94a9337ce64c21d/graph_c94a9337ce64c21d.db.dump"},"https://stars.renci.org/var/plater/bl-3.1.2/OntologicalHierarchy_Automat/c94a9337ce64c21d/graph_c94a9337ce64c21d.db.dump")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nodes:")," 3,099,093"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Edges:")," 60,294,865"),(0,r.kt)(o.Z,{items:(0,c.jA)().items,mdxType:"DocCardList"}))}g.isMDXComponent=!0}}]);