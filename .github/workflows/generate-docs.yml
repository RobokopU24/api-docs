name: Generate docs

on:
  workflow_dispatch:
  repository_dispatch:
    types: [deploy]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # caching node_modules
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Write current date to environment variable
        run: echo "DATE=$(date +'%Y-%m-%d-%I.%M.%S%p')" >> $GITHUB_ENV

      - name: Add git user configuration
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Fetch staging from remote
        run: |
          git fetch
          git switch staging

      - name: Install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive

      - name: Fetch newest Automat OpenAPI document and metadata
        run: npm run preprocess

      - name: Generate Docusaurus mdx files
        run: |
          npm run clean-api-docs automat
          npm run gen-api-docs automat

      - name: Rewrite sidebar.js
        run: npm run rearrange-sidebar

      - name: Remove "Introduction" page
        run: rm ./docs/automat/automat.info.mdx || echo "Introduction docs page is already deleted"

      - name: Check for untracked files
        run: |
          git add -A
          if git status | grep -q 'Changes to be committed'; then
            echo "UPDATED=true" >> $GITHUB_ENV
          else
            echo "Docs have not been updated, nothing has changed." > $GITHUB_STEP_SUMMARY
          fi

      # Only run the next two steps if there were changes detected by `git status` in the previous step
      - name: Commit changes to staging
        if: ${{ env.UPDATED == 'true' }}
        run: |
          git commit -m "$(echo 'Update documentation - ${{ env.DATE }}')"
          git push

        # These steps were used to deploy to github pages, but now we're using Sterling, so we just
        # want to update the documentation and commit it back to the repository. We can then create
        # a release to trigger the other action which builds an image we can use in k8s

        # - name: Build the site
        #   if: ${{ env.UPDATED == 'true' }}
        #   run: npm run build

        # - name: Setup GH Pages
        #   if: ${{ env.UPDATED == 'true' }}
        #   uses: actions/configure-pages@v1

        # - name: Upload artifact
        #   if: ${{ env.UPDATED == 'true' }}
        #   uses: actions/upload-pages-artifact@v1
        #   with:
        #     path: ./build

        # - name: Deploy to GitHub Pages
        #   if: ${{ env.UPDATED == 'true' }}
        #   id: deployment
        #   uses: actions/deploy-pages@v1

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
